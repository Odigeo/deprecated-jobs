Any application will need a Queue Service to execute jobs asynchronously. Its purpose is to receive
multi-step job descriptions in JSON (essentially consisting of a series of requests to make, e.g. 
"make a PUT to this URL with this body, then a POST to this URL with this body, then a DELETE to this 
URL". The steps are named.
 
The Queue Service accepts the job, enqueues it in a FIFO queue, and immediately returns a QueueJob 
resource to the caller.
 
The AsyncJob resource can be polled via GET to check the status of the job. This is a very efficient 
operation since the result is cached aggressively in Varnish. Thus, a web client can poll an AsyncJob 
several times a second if necessary, e.g. to update a progress bar or to check for errors.
 
An AsyncJob can also be DELETEd from the queue.
 
Use cases: to start an update operation that might take time: book a ticket, send an email, upload and 
thumbnail a photograph, perform a search, etc.


== AsyncJob Workers

Make sure the <tt>/var/run/async_workers</tt> directory exists and is writable.

To start the AsyncJob workers during development:

  ruby lib/async_job_daemons.rb start

To stop them:

  ruby lib/async_job_daemons.rb stop

To run one of them without demonising:

  ruby lib/async_job_daemons.rb run

To see what's in the log directory:

  ls -l /var/run/async_job_workers

To see what the workers are logging:

  tail -f log/development.log


== AWS DynamoDB Setup

Before deploying the Jobs Service to AWS, you should set up DynamoDB databases for the
Chef environments you use:

* <tt>async_jobs_master</tt>
* <tt>async_jobs_staging</tt>
* <tt>async_jobs_prod</tt>

Whenever the AsyncJobs Service runs in Rails production mode, which it does in all the
deployed Chef environments, it requires you to manually create the DynamoDBs on AWS.
When run in development or test mode, AWS DynamoDB databases will be created on the fly,
with names that include their IP information. This is to enable development work and
testing to use AWS without collision.


== Sample AsyncJob

The following will create an AsyncJob which will turn to poison after about 35 seconds.
Raising the +retry_exponent+ to 2.5 yields poison in about a minute. Raising it to 3 
extends this to almost 2 minutes.

  AsyncJob.create(
    steps: [{'url' => 'http://127.0.0.1', 'retry_exponent' => 2}],
    credentials: "bWFnbmV0bzp4YXZpZXI=",
    token: "hhhhhhhhhhhhhhh")


== Running the specs

To run the specs, you must first install a gem called +fake_dynamo+, which runs a local, 
in-memory functional clone of Amazon DynamoDB. We use +fake_dynamo+ during development 
and testing.

First of all, copy the AWS configuration file from the template:

 cp config/aws.yml.example config/aws.yml

NB: +aws.yml+ is excluded from source control. This allows you to enter your AWS credentials
safely. Note that +aws.yml.example+ is under source control: don't edit it.

Make sure you have version 0.1.3 of the +fake_dynamo+ gem. It implements the +2011-12-05+ version
of the DynamoDB API. We're not using the +2012-08-10+ version, as the +aws-sdk+ ruby gem
doesn't fully support it.

Next, start +fake_dynamo+:

  fake_dynamo --port 4567

If this returns errors, make sure that <tt>/usr/local/var/fake_dynamo</tt> exists and
is writable:

 sudo mkdir -p /usr/local/var/fake_dynamo
 sudo chown peterb:staff /usr/local/var/fake_dynamo

When +fake_dynamo+ runs normally, open another window and issue the following command:

 curl -X DELETE http://localhost:4567

This will reset the +fake_dynamo+ database. It's not a required operation when starting
+fake_dynamo+; we're just using it here as a test that the installation works. It will
be issued automatically as part of the test suite, so don't expect test data to survive
between runs.

With +fake_dynamo+ running, you should now be able to do

 rspec

All tests should pass.

